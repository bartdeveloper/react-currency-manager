{"version":3,"sources":["api/currencyAPI.js","containers/CurrencyRate.js","components/CurrencyDetails.js"],"names":["NBPApiUri","getFewLastRatesByCode","code","api","getRateForCodeByDate","date","RateContainer","styled","div","CurrencyRate","this","props","no","mid","Component","CurrencyDetails","state","finish","exchangeRate","chosenDate","componentDidMount","a","currencyApi","match","params","name","setState","getRateCurrencyForDate","day","getDate","month","getMonth","preparedDate","getFullYear","dater","className","LineChart","width","height","data","rates","Line","type","dataKey","stroke","dot","CartesianGrid","strokeDasharray","XAxis","YAxis","interval","Tooltip","onChange","value","map","r","effectiveDate"],"mappings":"6MAEMA,EAAY,uCAILC,EAAwB,SAACC,GAAD,OAAUC,IAAA,UAAWH,EAAX,oBAAgCE,EAAhC,0BAElCE,EAAuB,SAACF,EAAMG,GAAP,OAAgBF,IAAA,UAAWH,EAAX,oBAAgCE,EAAhC,YAAwCG,EAAxC,kB,uBCL9CC,EAAgBC,IAAOC,IAAV,mHAObC,E,4JAEF,WAEI,MAA0BC,KAAKC,MAAvBC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,IAAKR,EAAjB,EAAiBA,KAEjB,OACI,cAACC,EAAD,UAAe,gCAAMD,EAAN,IAAY,iCAASQ,IAArB,OAAsC,uBAAK,gCAAQD,a,GAPnDE,aAYZL,I,wEChBTM,E,4MAEFC,MAAQ,CACJC,QAAQ,EACRC,aAAc,GACdC,WAAY,M,EAGhBC,kB,sBAAoB,4BAAAC,EAAA,sEACWC,EAAA,UAAqC,EAAKX,MAAMY,MAAMC,OAAOC,OADxE,OACVP,EADU,OAEhB,EAAKQ,SAAS,CAACR,eAAcD,QAAQ,IAFrB,2C,EAKpBU,uB,uCAAyB,WAAOtB,GAAP,uBAAAgB,EAAA,yDACrB,EAAKK,SAAS,CAACT,QAAQ,EAAOE,WAAYd,KACvCA,EAFkB,wBAGbuB,EAAMvB,EAAKwB,WACL,KAAID,EAAG,WAAOA,KACpBE,EAAQzB,EAAK0B,WAAa,GAClB,KAAID,EAAK,WAAOA,IACtBE,EAPW,UAOO3B,EAAK4B,cAPZ,YAO6BH,EAP7B,YAOsCF,GAPtC,SAQUN,EAAiC,EAAKX,MAAMY,MAAMC,OAAOC,KAAMO,GARzE,OAQXd,EARW,OASjB,EAAKQ,SAAS,CAACR,eAAcD,QAAQ,IATpB,yCAWUK,EAAA,UAAqC,EAAKX,MAAMY,MAAMC,OAAOC,OAXvE,QAWXP,EAXW,OAYjB,EAAKQ,SAAS,CAACR,eAAcD,QAAQ,IAZpB,4C,kGAgBzB,WAAS,IAAD,OAEJ,EAAoDP,KAAKM,MAArCkB,EAApB,EAAQf,WAAmBD,EAA3B,EAA2BA,aAAcD,EAAzC,EAAyCA,OAEzC,OAEI,gCACI,sBAAKkB,UAAU,iBAAf,gCAAmD,iCAASzB,KAAKC,MAAMY,MAAMC,OAAOC,UAEpF,qBAAKU,UAAU,QAAf,SACI,eAACC,EAAA,EAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKC,KAAMrB,EAAasB,MAAvD,UACI,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWC,QAAQ,MAAMC,OAAO,UAAUC,KAAK,IAC1D,cAACC,EAAA,EAAD,CAAeF,OAAO,UAAUG,gBAAgB,QAChD,cAACC,EAAA,EAAD,CAAOL,QAAQ,kBACf,cAACM,EAAA,EAAD,CAAOC,SAAS,qBAChB,cAACC,EAAA,EAAD,SAIR,8BACI,cAAC,IAAD,CACIC,SAAU,SAACC,GAAD,OAAW,EAAK1B,uBAAuB0B,IACjDA,MAAOnB,MAIf,qBAAKC,UAAU,uBAAf,SAEI,qBAAKA,UAAU,6BAAf,UAEgB,IAAXlB,GAAoBC,EAAasB,MAAMc,KAAI,SAAAC,GACxC,OAAO,cAAC,EAAD,CAEP3C,GAAI2C,EAAE3C,GACNC,IAAK0C,EAAE1C,IACPR,KAAMkD,EAAEC,eAHHD,EAAE3C,kB,GA7DLE,aA+EfC","file":"static/js/4.b312e5c6.chunk.js","sourcesContent":["import * as api from './api'\n\nconst NBPApiUri = 'https://api.nbp.pl/api/exchangerates';\n\nexport const getAll = () => api.get(`${NBPApiUri}/tables/a?format=json`)\n\nexport const getFewLastRatesByCode = (code) => api.get(`${NBPApiUri}/rates/a/${code}/last/20?format=json`)\n\nexport const getRateForCodeByDate = (code, date) => api.get(`${NBPApiUri}/rates/a/${code}/${date}?format=json`)","import React, {Component} from 'react'\nimport styled from 'styled-components'\n\nconst RateContainer = styled.div`\n    background: #f0f0f0;\n    color: #000;\n    padding: 15px;\n    margin-top: 15px;\n`\n\nclass CurrencyRate extends Component {\n\n    render(){\n\n        const { no, mid, date } = this.props\n\n        return(\n            <RateContainer><div>{date} <strong>{mid}</strong> PLN<br/><small>{no}</small></div></RateContainer>\n        )\n    }\n}\n\nexport default CurrencyRate","import React, { Component } from 'react';\nimport * as currencyApi from '../api/currencyAPI'\nimport CurrencyRate from '../containers/CurrencyRate'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'\nimport DatePicker from 'react-date-picker';\n\nclass CurrencyDetails extends Component {\n\n    state = {\n        finish: false,\n        exchangeRate: [],\n        chosenDate: null\n    }\n    \n    componentDidMount = async () => {\n        const exchangeRate = await currencyApi.getFewLastRatesByCode(`${this.props.match.params.name}`);\n        this.setState({exchangeRate, finish: true});\n    }\n\n    getRateCurrencyForDate = async (date) => {\n        this.setState({finish: false, chosenDate: date}); \n        if(date){\n            let day = date.getDate();\n            if (day < 10) day = `0${day}`;\n            let month = date.getMonth() + 1;\n            if (month < 10) month = `0${month}`;\n            const preparedDate = `${date.getFullYear()}-${month}-${day}`;\n            const exchangeRate = await currencyApi.getRateForCodeByDate(this.props.match.params.name, preparedDate);\n            this.setState({exchangeRate, finish: true});\n        } else {\n            const exchangeRate = await currencyApi.getFewLastRatesByCode(`${this.props.match.params.name}`);\n            this.setState({exchangeRate, finish: true});\n        }\n    }\n\n    render(){\n\n        const { chosenDate: dater, exchangeRate, finish } = this.state\n\n        return(\n\n            <div>\n                <div className=\"currency-rates\">Currency rates for <strong>{this.props.match.params.name}</strong></div>\n                \n                <div className=\"chart\">\n                    <LineChart width={550} height={300} data={exchangeRate.rates}>\n                        <Line type=\"monotone\" dataKey=\"mid\" stroke=\"#8884d8\" dot={false}/>\n                        <CartesianGrid stroke=\"#a5a1a1\" strokeDasharray=\"5 5\" />\n                        <XAxis dataKey=\"effectiveDate\" />\n                        <YAxis interval=\"preserveStartEnd\" />\n                        <Tooltip />\n                    </LineChart>\n                </div>\n\n                <div>\n                    <DatePicker\n                        onChange={(value) => this.getRateCurrencyForDate(value)}\n                        value={dater}\n                    />\n                </div>\n\n                <div className=\"currency-rates-table\">\n                \n                    <div className=\"currency-rates-table-items\">\n\n                        {finish === true &&  exchangeRate.rates.map(r => {\n                            return <CurrencyRate\n                            key={r.no}\n                            no={r.no}\n                            mid={r.mid}\n                            date={r.effectiveDate}\n                        />  \n                        })}\n\n                    </div>\n                </div>\n                \n            </div>\n\n        );\n\n    }\n\n}\n\nexport default CurrencyDetails"],"sourceRoot":""}